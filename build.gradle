plugins {
	id 'com.unascribed.nilgradle' version '1.4.1'
}

// You can change this to be higher if you like. NilLoader itself is compiled
// for Java 8 for compatibility with older versions.
sourceCompatibility = 8
targetCompatibility = 8

group = 'hellfall'
archivesBaseName = 'demonasm'
version = '1.3'

repositories {
	maven {
		// NilLoader and NilGradle are published here
		url 'https://repo.sleeping.town'
		content {
			includeGroup 'com.unascribed'
		}
	}
	maven {
		// If you wish to use Yarn or Intermediary
		url 'https://maven.fabricmc.net'
		content {
			includeGroup 'net.fabricmc'
		}
	}
	maven {
		// If you wish to use mcp_config or compile against Minecraft Forge
		url 'https://maven.minecraftforge.net'
		content {
			includeGroup 'net.minecraftforge'
			includeGroup 'de.oceanlabs.mcp'
		}
		metadataSources {
			artifact()
		}
	}
	maven {
		// GTNH maven
		url "https://nexus.gtnewhorizons.com/repository/public/"
		content {
			includeGroup 'com.github.GTNewHorizons'
		}
		metadataSources {
			ignoreGradleMetadataRedirection()
			mavenPom()
		}
		allowInsecureProtocol = true
	}
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
	flatDir {
		dirs 'mappings'
		content {
			includeGroup 'mappings'
		}
	}
}

nil {
	id "demonasm"
	// Set this to false for a smaller JAR that can't be run as a standalone Java agent
	standalone false
//	keepAllMappings()
}

dependencies {
	loader 'com.unascribed:nilloader:1.3.2'

	game nil.minecraft('1.7.10', 'client')

	mod 'net.minecraftforge:forge:1.7.10-10.13.4.1614-1.7.10:universal'

	mod('com.github.GTNewHorizons:IguanaTweaksTConstruct:2.3.0:dev') {
		transitive = false
	}
	mod('com.github.GTNewHorizons:BloodMagic:1.4.1:dev') {
		transitive = false
	}
	mod('com.github.GTNewHorizons:Botania:1.9.23-GTNH:dev') {
		transitive = false
	}
	mod('com.github.GTNewHorizons:twilightforest:2.4.3:dev'){
		transitive = false
	}
	mod('com.github.GTNewHorizons:OpenComputers:1.9.8-GTNH:dev') {
		transitive = false
	}
	mod ('com.github.GTNewHorizons:Galacticraft:3.0.69-GTNH:dev') {
		transitive = false
	}
	mod ('com.github.GTNewHorizons:FTB-Utilities:1.1.0-GTNH:dev')
	mod ('com.github.GTNewHorizons:WarpTheory:1.2.16-GTNH:dev') {
		transitive = false
	}
	mod 'com.github.GTNewHorizons:NotEnoughItems:2.3.54-GTNH:dev'
	mod 'curse.maven:gregtech4-483827:4398634'
	mod 'curse.maven:ruins-227873:2367311'
	mod 'maven.modrinth:xaeros-minimap:21.10.38_Forge_1.7.10'
	mod 'maven.modrinth:ears:1.4.5_01+forge-1.7'
}

mappings {
//	work nil.mcpArchiveSrg('1.7.10', '908')
//	target nil.mcpArchive('1.7.10', '908')
//	work 'de.oceanlabs.mcp:mcp_stable:12-1.7.10@zip'
	via 'mappings:notch-srg@srg'
//	via 'mappings:notch-mcp@srg'
	work 'mappings:srg-mcp@srg'
//	altTarget 'mappings:notch-srg@srg'
	altTarget 'mappings:srg-mcp@srg'
//	altTarget 'mappings:mcp-srg@srg'
//	altTarget 'mappings:mcp-notch@srg'
//	altTarget 'mappings:notch-mcp@srg'
}

tasks.register('runMc') {
	group("custom")
	dependsOn(build)
	doLast {
		copy {
			from("build/libs") {
				include("*.jar")
			}
			into("/home/jade/.local/share/multimc/instances/ear test/.minecraft/nilmods")
		}
		exec {
//			workingDir("/home/jade/.local/share/multimc/instances/upsilon/minecraft/")
			commandLine("prismlauncher", "-l", "ear test", "-a", "TheLastKumqwat")
		}
	}
}

// god i hate obfuscation mappings
processResources.from("mappings.json", {
        into("META-INF/nil")
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
})